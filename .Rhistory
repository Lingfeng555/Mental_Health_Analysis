image <- function(x) x^2
data <- data.frame(
domain = 1:1000,
image = image(c(1:1000))
)
ggplot2::ggplot(data = data, aes (x=domain, y=image))+ggplot2::geom_line()
ggplot2::ggplot(data = data, aes=(x=domain, y=image))+ggplot2::geom_line()
ggplot2::ggplot(data = data, aes=(x=domain y=image))+ggplot2::geom_line()
ggplot2::ggplot(data = data, aes=(x=domain, y=image))+ggplot2::geom_line()
image <- function(x) x^2
d <- data.frame(
domain = 1:1000,
image = image(c(1:1000))
)
ggplot2::ggplot(data=d, aes=(x=domain, y=image))+ggplot2::geom_line()
ggplot2::ggplot(data=d, aes(x=domain, y=image))+ggplot2::geom_line()
ggplot2::ggplot(data=d, ggplot::aes(x=domain, y=image))+ggplot2::geom_line()
ggplot2::ggplot(data=d, ggplot::aes(x=domain, y=image))+ggplot2::geom_line()
ggplot2::ggplot(data=d, ggplot2::aes(x=domain, y=image))+ggplot2::geom_line()
image <- function(x) x^2
d <- data.frame(
domain = -1000:1000,
image = image(c(-1000:1000))
)
ggplot2::ggplot(data=d, ggplot2::aes(x=domain, y=image))+ggplot2::geom_line()
source("Init/BuildModel.R")
setwd("C:/Users/Propietario/Desktop/SRC/Mental_Health_Analysis")
source("Init/BuildModel.R")
Load_Libraries <- function(packages){
newpack  = packages[!(packages %in% installed.packages()[,"Package"])]
if(length(newpack)) install.packages(newpack)
lapply(packages, library, character.only=TRUE)
}
Load_Libraries(c("dplyr", "faraway", "FactoMineR", "plotrix"))
# Create factors with specified levels for Math variable
MENTAL_HEALTH$Math <- factor(MENTAL_HEALTH$Math)
# Create a copy of the original dataset with relevant columns
MENTAL_HEALTH_Categorical <- MENTAL_HEALTH[, c( "Math","Depression")]
# Define breaks for categorizing Depression variable into 5 levels
breaks <- quantile(MENTAL_HEALTH$Depression, probs = seq(0, 1, by = 0.2), na.rm = TRUE)
# Convert numerical values to categorical strings
MENTAL_HEALTH_Categorical$Depression <- cut(MENTAL_HEALTH$Depression, breaks = breaks, labels = c("VeryLow", "Low", "Medium", "High", "VeryHigh"), include.lowest = TRUE)
# Convert the categorical strings to factors
MENTAL_HEALTH_Categorical$Depression <- factor(MENTAL_HEALTH_Categorical$Depression, levels = c("VeryLow", "Low", "Medium", "High", "VeryHigh"))
# Create vectors for row names and column names
row_names <- c("Math_Unknown","Math_VeryLow", "Math_Low", "Math_High", "Math_VeryHigh")
column_names <- c("Depression-VeryLow", "Depression-Low","Depression-Medium","Depression-High", "Depression-VeryHigh")
# Create a contingency table
contingency_table <- table(MENTAL_HEALTH_Categorical$Math, MENTAL_HEALTH_Categorical$Depression)
# Create observed contingency table
observed_table <- contingency_table
# Calculate expected contingency table under independence
expected_table <- outer(rowSums(observed_table), colSums(observed_table)) / sum(observed_table)
# Perform chi-square test for independence
chi_square_test <- chisq.test(observed_table) # Gives warning due to low sample size
# Print observed contingency table
print("Observed Contingency Table:")
print(observed_table)
# Print expected contingency table under independence
print("Expected Contingency Table under Independence:")
print(expected_table)
# Print chi-square test results
print("Chi-Square Test for Independence:")
print(chi_square_test)
# Print the contingency table
print(contingency_table)
CA_contingency <- CA(contingency_table)
# Math in blue and Depression in red
plot(CA_contingency)
summary(CA_contingency)
total_observations <- sum(contingency_table)
M <- chi_square_test$residuals/sqrt(total_observations) # Residuals can also be computed as (xtest$observed-xtest$expected)/sqrt(xtest$expected)
M <- M%*%t(M)
eig <- eigen(M)
#Notice that, as opposed to PCA, in this case eigenvalues can be lower than 1, since the entries of the matrix being
# diagonalized are not 1!
cumulative <- cumsum(eig$values)/sum(eig$values)
# Scree plot for explained variance
plot(1:length(eig$values), eig$values,  ylim = c(0, 1.1), type = "b", pch = 19, col = "blue",
xlab = "Component", ylab = "Explained Variance",
main = "Explained Variance by Component")
# Lista para guardar la suma de las distancias al cuadrado dentro de los clusters
wss <- numeric()
# Calcular el k-means para diferentes valores de k
for (k in 1:15) {
set.seed(123)
kmeans_result <- kmeans(MENTAL_HEALTH[, columns], centers = k, nstart = 20)
wss[k] <- kmeans_result$tot.withinss
}
plot(1:15, wss, type = "b", pch = 19, frame = FALSE,
xlab = "NÃºmero de clusters K",
ylab = "Total within-clusters sum of squares",
main = "Elbow Method for determining the optimal number of clusters")
n_cluster = 3
columns <- c("IQ", "Family", "GDP_Per_Capita", "Happiness", "Life_Expectancy", "Gov_Corruption", "Eating_Disorders")
kmeans_result <- kmeans ( MENTAL_HEALTH[, columns] , centers = n_cluster , nstart = 20)
fviz_cluster(kmeans_result, data = MENTAL_HEALTH[, columns], geom = "point", stand = FALSE)
Load_Libraries(c("dplyr", "faraway", "FactoMineR", "plotrix", "factoextra"))
# Lista para guardar la suma de las distancias al cuadrado dentro de los clusters
wss <- numeric()
# Calcular el k-means para diferentes valores de k
for (k in 1:15) {
set.seed(123)
kmeans_result <- kmeans(MENTAL_HEALTH[, columns], centers = k, nstart = 20)
wss[k] <- kmeans_result$tot.withinss
}
plot(1:15, wss, type = "b", pch = 19, frame = FALSE,
xlab = "NÃºmero de clusters K",
ylab = "Total within-clusters sum of squares",
main = "Elbow Method for determining the optimal number of clusters")
n_cluster = 3
columns <- c("IQ", "Family", "GDP_Per_Capita", "Happiness", "Life_Expectancy", "Gov_Corruption", "Eating_Disorders")
kmeans_result <- kmeans ( MENTAL_HEALTH[, columns] , centers = n_cluster , nstart = 20)
fviz_cluster(kmeans_result, data = MENTAL_HEALTH[, columns], geom = "point", stand = FALSE)
#Lets apply HAC
centers <- kmeans_result$centers
dist_centers <- dist(centers)
hac_result <- hclust(dist_centers, method = "ward.D2")
plot(hac_result, main = "Dendrogram of K-means Cluster Centers",
xlab = "Cluster Centers", sub = "", ylab = "Height")
