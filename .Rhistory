demo()
colors()
"Hello world"
5+5
plor (1:10)
plot (1:10)
"Hello world"
x <- 3
y <- 4
x + y
22
q()
install.packages("dslabs")
libreary(dslabs)
libreary(dslab)
libreary(dslabs)
dslabs
install.packages("dslabs")
libreary(dslabs)
library(dslabs)
mist <- read_mnist()
mist
summary(mist)
class(mist)
class(mist$train$images)
class(mist$test$images)
display_digit <- function (matrix, labels){
image(matrix)
}
digit <- mist$train$images[1,]
digit
display_digit(digit, 8)
digit <- matrix(digit, nrow = 1)
display_digit(digit, 8)
digit <- mist$train$images[1,]
digit <- matrix(digit, nrow = 28, ncol = 28)
display_digit(digit, 8)
digit <- mist$train$images[65,]
digit <- matrix(digit, nrow = 28, ncol = 28)
display_digit(digit, 8)
display_digit <- function (matrix, labels){
image(matrix[28:1])
}
digit <- mist$train$images[65,]
digit <- matrix(digit, nrow = 28, ncol = 28)
display_digit(digit, 8)
display_digit <- function (matrix, labels){
image(matrix[,28:1])
}
digit <- mist$train$images[65,]
digit <- matrix(digit, nrow = 28, ncol = 28)
display_digit(digit, 8)
display_digit <- function (matrix, labels){
image(matrix[,28:1])
}
digit <- mist$train$images[1,]
digit <- matrix(digit, nrow = 28, ncol = 28)
display_digit(digit, 8)
rainbow(6)
display_digit <- function (matrix, labels){
image(matrix[,28:1], col=rainbow(256))
}
digit <- mist$train$images[1,]
digit <- matrix(digit, nrow = 28, ncol = 28)
display_digit(digit, 8)
display_digit <- function (matrix, labels){
image(matrix[,28:1], col=gray(256))
}
digit <- mist$train$images[1,]
digit <- matrix(digit, nrow = 28, ncol = 28)
display_digit(digit, 8)
display_digit <- function (matrix, labels){
image(matrix[,28:1], col=gray.colors(256))
}
digit <- mist$train$images[1,]
digit <- matrix(digit, nrow = 28, ncol = 28)
display_digit(digit, 8)
display_digit <- function (matrix, labels){
image(matrix[,28:1], col=gray.colors(256))
}
digit <- mist$train$images[1,]
digit <- matrix(digit, nrow = 28, ncol = 28)
display_digit(digit, mist$train$labels[1,])
library(class)
#clasify
prediction <- class::knn(
mist$train$images,
mist$test$images,
cl=mist$train$labels,
k=3
)
col(x=rock$area)
col(x=rock$area, y = rock$peri)
cor(x=rock$area, y = rock$peri)
set.seed(34566)
rnorm(19999)
normalize <- function(vector_ , x){
return( (x-min(vector_))/(max(vector) - min(vector)) )
}
normalize(iris$Sepal.Length, iris$Sepal.Length[1])
normalize(iris$Sepal.Length, iris$Sepal.Length[1])
iris$Sepal.Length
iris$Sepal.Length[1]
max(iris$Sepal.Length)
normalize <- function(vector_ , x){
max <- max(vector_)
min <- min(vector_)
return( (x-min)/(max-min) )
}
normalize(iris$Sepal.Length, iris$Sepal.Length[1])
normalize(iris$Sepal.Length, iris$Sepal.Length)
normalize <- function(vector_){
max <- max(vector_)
min <- min(vector_)
return( (vector_-min)/(max-min) )
}
normalize(iris$Sepal.Length)
iris
n_iris <- data.frame(
Sepal.length = normalize(iris$Sepal.Length),
Sepal.width = normalize(iris$Sepal.Width),
Petal.length = normalize(iris$Petal.Width),
Petal.width = normalize(iris$Petal.Width),
Species = iris$Species
)
n_iris
set.seed(92)
n_iris[,]
length(n_iris)
length(n_iris[,])
length(n_iris$Sepal.length)
source("~/.active-rstudio-document")
sample_idx[1:(0.7*length(sample_idx))]
trainning_set <- n_iris[ sample_idx[1:(0.7*length(sample_idx))],]
test_set <- n_iris[ sample_idx[(0.7*length(sample_idx)):length(sample_idx)],]
View(test_set)
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
true_clasification <- n_iris[ sample_idx[1:(0.9*length(sample_idx))], 5 ]
knn(trainning_set, test_set, true_clasification, 2)
library(class)
library(class)
library(classds)
knn(trainning_set, test_set, true_clasification, 2)
prediction <- knn(trainning_set, test_set, true_clasification, 2)
table(prediction, true_clasification)
prediction <- knn(trainning_set, test_set, true_clasification, 40)
table(prediction, true_clasification)
prediction
prediction <- knn(trainning_set, test_set, cl=true_clasification, 40)
test_category <- n_iris[ sample_idx[(0.9*length(sample_idx)):length(sample_idx)], 5 ]
table(prediction, test_category)
source("~/.active-rstudio-document")
table(prediction, test_category)
prediction <- knn(trainning_set, test_set, cl=true_clasification, 2)
table(prediction, test_category)
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
normalize <- function(vector_){
max <- max(vector_)
min <- min(vector_)
return( (vector_-min)/(max-min) )
}
n_iris <- data.frame(
Sepal.length = normalize(iris$Sepal.Length),
Sepal.width = normalize(iris$Sepal.Width),
Petal.length = normalize(iris$Petal.Width),
Petal.width = normalize(iris$Petal.Width),
Species = iris$Species
)
set.seed(88)
sample_idx <- sample(1:length(iris$Sepal.Length))
idx_train<- sample_idx[1:(0.9*length(sample_idx))]
idx_test <- (0.9*length(sample_idx)):length(sample_idx)
trainning_set <- n_iris[ idx_train,]
test_set <- n_iris[ sample_idx[idx_test,]
test_category <- n_iris[ idx_test, 5 ]
source("~/.active-rstudio-document")
prediction <- knn(trainning_set, test_set, cl=true_clasification, 40)
table(prediction, test_category)
normalize <- function(vector_){
max <- max(vector_)
min <- min(vector_)
return( (vector_-min)/(max-min) )
}
n_iris <- data.frame(
Sepal.length = normalize(iris$Sepal.Length),
Sepal.width = normalize(iris$Sepal.Width),
Petal.length = normalize(iris$Petal.Width),
Petal.width = normalize(iris$Petal.Width),
Species = iris$Species
)
set.seed(88)
sample_idx <- sample(1:length(iris$Sepal.Length))
idx_train<- sample_idx[1:(0.9*length(sample_idx))]
idx_test <- (0.9*length(sample_idx)):length(sample_idx)
trainning_set <- n_iris[ idx_train,]
test_set <- n_iris[idx_test, ]
true_clasification <- n_iris[ idx_train, 5 ]
test_category <- n_iris[ idx_test, 5 ]
prediction <- knn(trainning_set, test_set, cl=true_clasification, 40)
prediction <- knn(trainning_set, test_set, cl=true_clasification, sqrt(length(idx_test))/2 )
table(prediction, test_category)
idx_test <- (0.89*length(sample_idx)):length(sample_idx)
idx_test <- (0.95*length(sample_idx)):length(sample_idx)
idx_test <- (0.91*length(sample_idx)):length(sample_idx)
idx_test <- (0.905*length(sample_idx)):length(sample_idx)
source("~/.active-rstudio-document")
View(test_set)
View(trainning_set)
prediction <- knn(trainning_set, test_set, cl=true_clasification, 40)
table(prediction, test_category)
View(test_set)
View(trainning_set)
normalize <- function(x) {
min_value <- min(x)
max_value <- max(x)
norm <- (x - min_value)/(max_value - min_value)
return(norm)
}
iris_norm <- apply(iris[,1:4], 2, normalize)
iris_norm <- as.data.frame(iris_norm)
summary(iris_norm)
set.seed(93)
random_indices <- sample(1:nrow(iris))
print(random_indices)
idx <- 1:(0.70 * nrow(iris))
iris_train <- iris_norm[random_indices[idx],]
head(iris_train)
print(dim(iris_train))
iris_test <- iris_norm[random_indices[-idx],]
head(iris_test)
print(dim(iris_test))
View(iris_norm)
source("~/R/KNNIRIS.R")
source("~/R/KNNIRIS.R")
normalize <- function(vector_){
max <- max(vector_)
min <- min(vector_)
return( (vector_-min)/(max-min) )
}
n_iris <- data.frame(
Sepal.length = normalize(iris$Sepal.Length),
Sepal.width = normalize(iris$Sepal.Width),
Petal.length = normalize(iris$Petal.Width),
Petal.width = normalize(iris$Petal.Width)
)
set.seed(88)
sample_idx <- sample(1:length(iris$Sepal.Length))
idx_train<- sample_idx[1:(0.9*length(sample_idx))]
idx_test <- (0.905*length(sample_idx)):length(sample_idx)
trainning_set <- n_iris[ idx_train,]
test_set <- n_iris[idx_test, ]
true_clasification <- iris[ idx_train, 5 ]
test_category <- iris[ idx_test, 5 ]
prediction <- knn(trainning_set, test_set, cl=true_clasification, 40)
table(prediction, test_category)
library(ggplot2)
ggplot2::movies
install.packages(ggplot2movies)
ggplot2movies
diamonds
diamonds
data <- data.frame(
carat <- diamonds$carat,
depth <- diamonds$depth,
table <- diamonds$table
)
View(data)
km <- kmeans(data, centers = 2)
View(km)
source("~/R/MovieCluster.R")
elbow <- c(km2$tot.withinss, km3$tot.withinss, km4$tot.withinss, km5$tot.withinss, km6$tot.withinss, km7$tot.withinss)
plot(x = 2:7 , y = elbow, type ="b")
plotElbow(range){
plotElbow(range){
plotElbow <- function(range){
elbow <- c()
for (variable in 2:range) {
km <- kmeans(data, centers = variable)
rbind(elbow, km$tot.withinss)
}
return( plot(x=2:range, y = elbow, type = "b") )
}
plotElbow(7)
plotElbow <- function(range){
elbow <- c()
for (variable in 2:range) {
km <- kmeans(data, centers = variable)
rbind(elbow, km$tot.withinss)
}
print(elbow)
return( plot(x=2:range, y = elbow, type = "b") )
}
plotElbow(7)
plotElbow <- function(range){
elbow <- c()
for (variable in 2:range) {
km <- kmeans(data, centers = variable)
elbow <- cl(elbow, km$tot.withinss)
}
print(elbow)
return( plot(x=2:range, y = elbow, type = "b") )
}
plotElbow(7)
plotElbow <- function(range){
elbow <- c()
for (variable in 2:range) {
km <- kmeans(data, centers = variable)
elbow <- c(elbow, km$tot.withinss)
}
print(elbow)
return( plot(x=2:range, y = elbow, type = "b") )
}
plotElbow(7)
plotElbow(8)
plotElbow(15)
plotElbow(40)
km <- kmeans(data, center = 14)
km
plot(z = 1)
source("~/R/MovieCluster.R")
women
heigth <- women$height
quantile(heigth, 5)
quantile(heigth, 0.25)
quartile(height)
quartile(height)
quantile(height)
quantile(heigth)
iqr(heigth)
IQR(heigth)
source("~/R/MovieCluster.R")
km <- kmeans(data, centers = 17)
source("~/R/MovieCluster.R")
View(km)
plot(data$carat, data$depth,
col = km$cluster,
pch = 19,
main = "Scatter Plot of Clusters",
xlab = "Carat",
ylab = "Depth")
# Add legend for cluster colors
legend("topright", legend = unique(km$cluster), col = 1:length(unique(km$cluster)), pch = 19, title = "Cluster")
plot(data$carat, data$depth,
col = km$cluster,
pch = 17,
main = "Scatter Plot of Clusters",
xlab = "Carat",
ylab = "Depth")
# Add legend for cluster colors
legend("topright", legend = unique(km$cluster), col = 1:length(unique(km$cluster)), pch = 19, title = "Cluster")
plot(data$carat, data$depth,
col = km$cluster,
main = "Scatter Plot of Clusters",
xlab = "Carat",
ylab = "Depth")
# Add legend for cluster colors
legend("topright", legend = unique(km$cluster), col = 1:length(unique(km$cluster)), pch = 19, title = "Cluster")
plot(data$carat, data$depth,
col = km$cluster,
pch = 19,
main = "Scatter Plot of Clusters",
xlab = "Carat",
ylab = "Depth")
# Add legend for cluster colors
legend("topright", legend = unique(km$cluster), col = 1:length(unique(km$cluster)), pch = 19, title = "Cluster")
km <- kmeans(data, centers = 8)
plot(data$carat, data$depth,
col = km$cluster,
pch = 19,
main = "Scatter Plot of Clusters",
xlab = "Carat",
ylab = "Depth")
# Add legend for cluster colors
legend("topright", legend = unique(km$cluster), col = 1:length(unique(km$cluster)), pch = 19, title = "Cluster")
source("~/R/MovieCluster.R")
source("~/R/MovieCluster.R")
plot(data$carat, data$depth, data$table,
col = km$cluster,
pch = 19,
main = "Scatter Plot of Clusters",
xlab = "Carat",
ylab = "Depth")
# Add legend for cluster colors
legend("topright", legend = unique(km$cluster), col = 1:length(unique(km$cluster)), pch = 19, title = "Cluster")
plot(data$carat, data$depth, z= data$table,
col = km$cluster,
pch = 19,
main = "Scatter Plot of Clusters",
xlab = "Carat",
ylab = "Depth")
# Add legend for cluster colors
legend("topright", legend = unique(km$cluster), col = 1:length(unique(km$cluster)), pch = 19, title = "Cluster")
plot(data$carat, data$depth,
col = km$cluster,
pch = 19,
main = "Scatter Plot of Clusters",
xlab = "Carat",
ylab = "Depth")
# Add legend for cluster colors
legend("topright", legend = unique(km$cluster), col = 1:length(unique(km$cluster)), pch = 19, title = "Cluster")
library(scatterplot3d)
source("~/R/MovieCluster.R")
setwd("~/R/Mental_Health_Analysis")
